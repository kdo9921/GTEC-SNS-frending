<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>채팅방</title>
<link
rel="stylesheet"
href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css"
/>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        height: calc(100vh - 16px);
        margin: 0;
        padding: 0;
    }

    #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
        max-height: calc(100% - 70px);
        overflow-y: scroll;
        /*border-radius: 15px;*/
        padding: 15px;
        margin-bottom: 10px;
        flex-grow: 1;
    }

    #chat-controls {
        display: flex;
        gap: 10px;
        margin-top: auto;
    }
    #messages li.me {
        text-align: right;
    }
    #messages li.me .bubble {
        background-color: #9ce159;
        border-radius: 12px 12px 0 12px;
    }
    #messages li.others {
        text-align: left;
    }
    #messages li.others .bubble {
        background-color: lightgray;
        border-radius: 12px 12px 12px 0;
    }
    .bubble {
        display: inline-block;
        padding: 10px 15px;
        max-width: 70%;
        overflow-wrap: break-word;
        border-radius: 12px;
        margin-top: 16px;
        color: black;
    }
    #chat-controls {
        display: flex;
        gap: 10px;
    }
    #messageInput {
        flex: 1;
        border-radius: 15px;
        border: 1px solid #ccc;
        padding: 10px;
    }
    .dm {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .dm_container {
        padding: 1em;
        width: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr;
        margin: 0 auto;
        gap: 1em;
    }
    .card {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    a:link, a:visited {
        color: black;
        text-decoration: none;
        transition: color 0.5s;
    }


    @media (max-width: 992px) {
        .dm_container {
            display: block;
        }
    <% if (room) { %>
        .dm_list {
            display: none;
        }
    <% } else { %>
        .dm {
            display: none;
        }
    <% } %>
	}

    @media (prefers-color-scheme: dark) {
        body {
            background-color: #303030;
            color: #f8f9fa;
        }

        .card {
            background-color: #202020;
            color: #f8f9fa;
        }

        a:link, a:visited {
            color: #f8f9fa;
            text-decoration: none;
        }
        a:hover {
            color: #9ce159;
        }

        #messages li.others .bubble {
            color: black;
        }

        #messages li.me .bubble {
            background-color: #0b93f6;
            color: #fff;
        }

    }
</style>
    
</head>
<body>
    <nav
        class="navbar navbar-expand-lg navbar-light"
        style="background-color: #9ce159"
    >
        <div class="container">
            <a class="navbar-brand" href="/">Frending</a>
            <button
                class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarNav"
                aria-controls="navbarNav"
                aria-expanded="false"
                aria-label="Toggle navigation"
            >
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a
                            id="logoutButton"
                            class="nav-link"
                            href="/logout"
                            >Logout</a
                        >
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dm">DM</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-5">
        <div class="card">
            <div class="dm_container">
                <div class="dm_list">
                    <h1>DM</h1>
                    <hr>
                    <% if (chatList && chatList.length > 0) { %>
                        <% chatList.forEach(chat => { %>
                            <a href="/dm/<%= chat.user_id %>">
                                <h2><%= chat.user_id %></h2>
                                <p><%= chat.message_content %></p>
                                <p><%= chat.message_time %></p>
                            </a>
                            <hr>
                        <% }); %>
                    <% } else { %>
                        <p>대화 내용 없음</p>
                    <% } %>
                      
                </div>
                <div class="dm">
                    <% if (room) { %>
                    <!-- 메시지를 표시할 목록 -->
                        <h2 id="chat_user"></h2>
                        <ul id="messages"></ul>
        
                        <!-- 채팅 컨트롤: 메시지 입력 필드 및 전송 버튼 -->
                        <div id="chat-controls">
                            <input id="messageInput" autocomplete="off" />
                            <button id="sendButton" class="btn btn-primary">전송</button>
                        </div>
                    <% } else { %>
                        <div>
                            <h2>DM 선택하기</h2>
                            <p>진행중인 대화가 표시됩니다.</p>
                            <p>새로운 대화를 시작하려면 대화하고싶은 사용자의 소개 페이지에서 DM 시작 버튼을 눌러주세요.</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    

<% if (room) { %>
<script src="/socket.io/socket.io.js"></script>
<script>

    const socket = io();

    
    // 현재 채팅방에 참가 ('방번호' 채팅방에 참가한다고 서버쪽에 이벤트 발송)
    socket.emit('joinRoom', '<%= room %>');

    // 채팅 메시지를 받았을 때의 동작 (서버에서 보내는 이벤트 수신하면 실행)
    socket.on('chatMessage', (data) => {
        var li = document.createElement('li');
        var div = document.createElement('div');
        div.className = 'bubble';
        
        // 현재 사용자가 보낸 메시지인지 확인
        if (data.nickname === '<%= nickname %>') {
            li.className = 'me';
            div.textContent = data.message;
        } else {
            li.className = 'others';
            div.textContent = data.message; //data.nickname + ': ' + data.message;
        }

        li.appendChild(div);
        document.getElementById('messages').appendChild(li);

        document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
    });

    // 엔터 누르면 메시지 전송 버튼 누른것과 같은 동작
    document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    // 메시지 전송 버튼 클릭 
    document.getElementById('sendButton').onclick = () => {
        sendMessage();
    };

    // 메시지 전송
    function sendMessage() {
        var message = document.getElementById('messageInput').value;
        if(message.trim()) {
            // 서버측에 방 번호와 메시지 내용, 내 닉네임 전송
            socket.emit('chatMessage', { room: '<%= room %>', message: message, nickname: '<%= nickname %>' });
            document.getElementById('messageInput').value = '';
        }
    }

    // 페이지가 로드되면 이전 메시지 요청
    document.addEventListener('DOMContentLoaded', (event) => {
        socket.emit('loadMessages', '<%= room %>');
        
        const pathname = window.location.pathname;
        document.getElementById("chat_user").innerHTML = pathname.replace("/dm/","");
    });

    // 서버로부터 이전 메시지를 받음
    socket.on('loadedMessages', (messages) => {
        console.log("메시지 로드")
        console.log(messages)
        messages.forEach(message => {
            // 메시지 렌더링 로직 (위에서 정의한 것과 동일)
            var li = document.createElement('li');
            var div = document.createElement('div');
            div.className = 'bubble';
            
            // 현재 사용자가 보낸 메시지인지 확인
            if (message.user_id === '<%= nickname %>') {
                li.className = 'me';
                div.textContent = message.message_content;
            } else {
                li.className = 'others';
                div.textContent = message.message_content; //data.nickname + ': ' + data.message;
            }

            li.appendChild(div);
            document.getElementById('messages').appendChild(li);

            document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
        });
    });
</script>
<% } %>
</body>
</html>
